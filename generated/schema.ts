// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class StakeFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeFactory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakeFactory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StakeFactory", id.toString(), this);
    }
  }

  static load(id: string): StakeFactory | null {
    return changetype<StakeFactory | null>(store.get("StakeFactory", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get implementation(): Bytes {
    let value = this.get("implementation");
    return value!.toBytes();
  }

  set implementation(value: Bytes) {
    this.set("implementation", Value.fromBytes(value));
  }

  get children(): Array<string> | null {
    let value = this.get("children");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set children(value: Array<string> | null) {
    if (!value) {
      this.unset("children");
    } else {
      this.set("children", Value.fromStringArray(<Array<string>>value));
    }
  }

  get childrenCount(): BigInt {
    let value = this.get("childrenCount");
    return value!.toBigInt();
  }

  set childrenCount(value: BigInt) {
    this.set("childrenCount", Value.fromBigInt(value));
  }
}

export class StakeERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeERC20 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakeERC20 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StakeERC20", id.toString(), this);
    }
  }

  static load(id: string): StakeERC20 | null {
    return changetype<StakeERC20 | null>(store.get("StakeERC20", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get deployBlock(): BigInt {
    let value = this.get("deployBlock");
    return value!.toBigInt();
  }

  set deployBlock(value: BigInt) {
    this.set("deployBlock", Value.fromBigInt(value));
  }

  get deployTimestamp(): BigInt {
    let value = this.get("deployTimestamp");
    return value!.toBigInt();
  }

  set deployTimestamp(value: BigInt) {
    this.set("deployTimestamp", Value.fromBigInt(value));
  }

  get deployer(): Bytes | null {
    let value = this.get("deployer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set deployer(value: Bytes | null) {
    if (!value) {
      this.unset("deployer");
    } else {
      this.set("deployer", Value.fromBytes(<Bytes>value));
    }
  }

  get factory(): string {
    let value = this.get("factory");
    return value!.toString();
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokenPoolSize(): BigInt {
    let value = this.get("tokenPoolSize");
    return value!.toBigInt();
  }

  set tokenPoolSize(value: BigInt) {
    this.set("tokenPoolSize", Value.fromBigInt(value));
  }

  get initialRatio(): BigInt {
    let value = this.get("initialRatio");
    return value!.toBigInt();
  }

  set initialRatio(value: BigInt) {
    this.set("initialRatio", Value.fromBigInt(value));
  }

  get tokenToStakeTokenRatio(): BigDecimal {
    let value = this.get("tokenToStakeTokenRatio");
    return value!.toBigDecimal();
  }

  set tokenToStakeTokenRatio(value: BigDecimal) {
    this.set("tokenToStakeTokenRatio", Value.fromBigDecimal(value));
  }

  get stakeTokenToTokenRatio(): BigDecimal {
    let value = this.get("stakeTokenToTokenRatio");
    return value!.toBigDecimal();
  }

  set stakeTokenToTokenRatio(value: BigDecimal) {
    this.set("stakeTokenToTokenRatio", Value.fromBigDecimal(value));
  }

  get deposits(): Array<string> | null {
    let value = this.get("deposits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set deposits(value: Array<string> | null) {
    if (!value) {
      this.unset("deposits");
    } else {
      this.set("deposits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get withdraws(): Array<string> | null {
    let value = this.get("withdraws");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set withdraws(value: Array<string> | null) {
    if (!value) {
      this.unset("withdraws");
    } else {
      this.set("withdraws", Value.fromStringArray(<Array<string>>value));
    }
  }

  get holders(): Array<string> | null {
    let value = this.get("holders");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set holders(value: Array<string> | null) {
    if (!value) {
      this.unset("holders");
    } else {
      this.set("holders", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class StakeHolder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeHolder entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakeHolder must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StakeHolder", id.toString(), this);
    }
  }

  static load(id: string): StakeHolder | null {
    return changetype<StakeHolder | null>(store.get("StakeHolder", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get stakeToken(): string {
    let value = this.get("stakeToken");
    return value!.toString();
  }

  set stakeToken(value: string) {
    this.set("stakeToken", Value.fromString(value));
  }

  get totalStake(): BigInt {
    let value = this.get("totalStake");
    return value!.toBigInt();
  }

  set totalStake(value: BigInt) {
    this.set("totalStake", Value.fromBigInt(value));
  }

  get totalDeposited(): BigInt {
    let value = this.get("totalDeposited");
    return value!.toBigInt();
  }

  set totalDeposited(value: BigInt) {
    this.set("totalDeposited", Value.fromBigInt(value));
  }

  get totalEntitlement(): BigInt {
    let value = this.get("totalEntitlement");
    return value!.toBigInt();
  }

  set totalEntitlement(value: BigInt) {
    this.set("totalEntitlement", Value.fromBigInt(value));
  }

  get deposits(): Array<string> | null {
    let value = this.get("deposits");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set deposits(value: Array<string> | null) {
    if (!value) {
      this.unset("deposits");
    } else {
      this.set("deposits", Value.fromStringArray(<Array<string>>value));
    }
  }

  get withdraws(): Array<string> | null {
    let value = this.get("withdraws");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set withdraws(value: Array<string> | null) {
    if (!value) {
      this.unset("withdraws");
    } else {
      this.set("withdraws", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class StakeDeposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakeDeposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StakeDeposit", id.toString(), this);
    }
  }

  static load(id: string): StakeDeposit | null {
    return changetype<StakeDeposit | null>(store.get("StakeDeposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get depositor(): string {
    let value = this.get("depositor");
    return value!.toString();
  }

  set depositor(value: string) {
    this.set("depositor", Value.fromString(value));
  }

  get stakeToken(): string {
    let value = this.get("stakeToken");
    return value!.toString();
  }

  set stakeToken(value: string) {
    this.set("stakeToken", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get stakeTokenMinted(): BigInt {
    let value = this.get("stakeTokenMinted");
    return value!.toBigInt();
  }

  set stakeTokenMinted(value: BigInt) {
    this.set("stakeTokenMinted", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get tokenPoolSize(): BigInt {
    let value = this.get("tokenPoolSize");
    return value!.toBigInt();
  }

  set tokenPoolSize(value: BigInt) {
    this.set("tokenPoolSize", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get depositedAmount(): BigInt {
    let value = this.get("depositedAmount");
    return value!.toBigInt();
  }

  set depositedAmount(value: BigInt) {
    this.set("depositedAmount", Value.fromBigInt(value));
  }
}

export class StakeWithdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakeWithdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakeWithdraw must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StakeWithdraw", id.toString(), this);
    }
  }

  static load(id: string): StakeWithdraw | null {
    return changetype<StakeWithdraw | null>(store.get("StakeWithdraw", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get withdrawer(): string {
    let value = this.get("withdrawer");
    return value!.toString();
  }

  set withdrawer(value: string) {
    this.set("withdrawer", Value.fromString(value));
  }

  get stakeToken(): string {
    let value = this.get("stakeToken");
    return value!.toString();
  }

  set stakeToken(value: string) {
    this.set("stakeToken", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get stakeTokenBurned(): BigInt {
    let value = this.get("stakeTokenBurned");
    return value!.toBigInt();
  }

  set stakeTokenBurned(value: BigInt) {
    this.set("stakeTokenBurned", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get tokenPoolSize(): BigInt {
    let value = this.get("tokenPoolSize");
    return value!.toBigInt();
  }

  set tokenPoolSize(value: BigInt) {
    this.set("tokenPoolSize", Value.fromBigInt(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value!.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get returnedAmount(): BigInt {
    let value = this.get("returnedAmount");
    return value!.toBigInt();
  }

  set returnedAmount(value: BigInt) {
    this.set("returnedAmount", Value.fromBigInt(value));
  }
}

export class ERC20 extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20 must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20", id.toString(), this);
    }
  }

  static load(id: string): ERC20 | null {
    return changetype<ERC20 | null>(store.get("ERC20", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get deployBlock(): BigInt {
    let value = this.get("deployBlock");
    return value!.toBigInt();
  }

  set deployBlock(value: BigInt) {
    this.set("deployBlock", Value.fromBigInt(value));
  }

  get deployTimestamp(): BigInt {
    let value = this.get("deployTimestamp");
    return value!.toBigInt();
  }

  set deployTimestamp(value: BigInt) {
    this.set("deployTimestamp", Value.fromBigInt(value));
  }

  get symbol(): string | null {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set symbol(value: string | null) {
    if (!value) {
      this.unset("symbol");
    } else {
      this.set("symbol", Value.fromString(<string>value));
    }
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value!.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value!.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get stakeContracts(): Array<string> | null {
    let value = this.get("stakeContracts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set stakeContracts(value: Array<string> | null) {
    if (!value) {
      this.unset("stakeContracts");
    } else {
      this.set("stakeContracts", Value.fromStringArray(<Array<string>>value));
    }
  }
}
