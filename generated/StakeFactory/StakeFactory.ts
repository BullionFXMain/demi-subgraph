// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Implementation extends ethereum.Event {
  get params(): Implementation__Params {
    return new Implementation__Params(this);
  }
}

export class Implementation__Params {
  _event: Implementation;

  constructor(event: Implementation) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get implementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewChild extends ethereum.Event {
  get params(): NewChild__Params {
    return new NewChild__Params(this);
  }
}

export class NewChild__Params {
  _event: NewChild;

  constructor(event: NewChild) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get child(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakeFactory__createChildTypedInputConfig_Struct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get initialRatio(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get symbol(): string {
    return this[3].toString();
  }
}

export class StakeFactory extends ethereum.SmartContract {
  static bind(address: Address): StakeFactory {
    return new StakeFactory("StakeFactory", address);
  }

  createChild(data_: Bytes): Address {
    let result = super.call("createChild", "createChild(bytes):(address)", [
      ethereum.Value.fromBytes(data_)
    ]);

    return result[0].toAddress();
  }

  try_createChild(data_: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("createChild", "createChild(bytes):(address)", [
      ethereum.Value.fromBytes(data_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createChildTyped(
    config_: StakeFactory__createChildTypedInputConfig_Struct
  ): Address {
    let result = super.call(
      "createChildTyped",
      "createChildTyped((address,uint256,string,string)):(address)",
      [ethereum.Value.fromTuple(config_)]
    );

    return result[0].toAddress();
  }

  try_createChildTyped(
    config_: StakeFactory__createChildTypedInputConfig_Struct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createChildTyped",
      "createChildTyped((address,uint256,string,string)):(address)",
      [ethereum.Value.fromTuple(config_)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isChild(maybeChild_: Address): boolean {
    let result = super.call("isChild", "isChild(address):(bool)", [
      ethereum.Value.fromAddress(maybeChild_)
    ]);

    return result[0].toBoolean();
  }

  try_isChild(maybeChild_: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isChild", "isChild(address):(bool)", [
      ethereum.Value.fromAddress(maybeChild_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateChildCall extends ethereum.Call {
  get inputs(): CreateChildCall__Inputs {
    return new CreateChildCall__Inputs(this);
  }

  get outputs(): CreateChildCall__Outputs {
    return new CreateChildCall__Outputs(this);
  }
}

export class CreateChildCall__Inputs {
  _call: CreateChildCall;

  constructor(call: CreateChildCall) {
    this._call = call;
  }

  get data_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CreateChildCall__Outputs {
  _call: CreateChildCall;

  constructor(call: CreateChildCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateChildTypedCall extends ethereum.Call {
  get inputs(): CreateChildTypedCall__Inputs {
    return new CreateChildTypedCall__Inputs(this);
  }

  get outputs(): CreateChildTypedCall__Outputs {
    return new CreateChildTypedCall__Outputs(this);
  }
}

export class CreateChildTypedCall__Inputs {
  _call: CreateChildTypedCall;

  constructor(call: CreateChildTypedCall) {
    this._call = call;
  }

  get config_(): CreateChildTypedCallConfig_Struct {
    return changetype<CreateChildTypedCallConfig_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CreateChildTypedCall__Outputs {
  _call: CreateChildTypedCall;

  constructor(call: CreateChildTypedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateChildTypedCallConfig_Struct extends ethereum.Tuple {
  get token(): Address {
    return this[0].toAddress();
  }

  get initialRatio(): BigInt {
    return this[1].toBigInt();
  }

  get name(): string {
    return this[2].toString();
  }

  get symbol(): string {
    return this[3].toString();
  }
}
